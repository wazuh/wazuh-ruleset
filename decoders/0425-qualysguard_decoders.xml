<!--
  -  Qualysguard decoders
  -  Created by Wazuh, Inc.
  -  Copyright (C) 2015-2019, Wazuh Inc.
  -  This program is a free software; you can redistribute it and/or modify it under the terms of GPLv2.
-->


<decoder name="qualysguard">
	<prematch>^"\d\d\d\d\d\d,""\w+"",""\d\d/\d\d/\d\d\d\d \(Overdue\)"",""\d+.\d+.\d+.\d+""</prematch>
</decoder>

<!--
EXAMPLE WITH PORT
"000151,""Open"",""07/02/2017 (Overdue)"",""192.168.1.128"",""443"",,""blabla5757abla"",""HJFEW7823H"",""Vulnerability - level 3"",""1235"",""SSL/TLS Server supports TLSv1.0"",""John Smith (Manager)"",""05/03/2017 at 12:27:33 (GMT-0400)"",""05/03/2017 at 12:27:33 (GMT-0400)"","

EXAMPLE WITHOUT PORT (with an extra resolved added)
"000148,""Open"",""06/17/2017 (Overdue)"",""192.168.1.128"",,,""blablabla4444"",""EUIFEWUEW78"",""Potential Vulnerability - level 4"",""1000"",""Potential UDP Backdoor"",""John Smith (Manager)"",""05/03/2017 at 12:27:33 (GMT-0400)"",""05/03/2017 at 12:27:33 (GMT-0400)"",""05/03/2017 at 12:27:33 (GMT-0400)"""

EXAMPLE WITHOUT NETBIOS_HOSTNAME
"000174,""Open"",""06/29/2017 (Overdue)"",""192.168.56.101"",,,""blabla.blabla.bla"",,""Potential Vulnerability - level 5"",""5555"",""Statd Format Bug Vulnerability"",""John Smith (Manager)"",""05/30/2017 at 20:15:13 (GMT-0400)"",""05/30/2017 at 20:15:13 (GMT-0400)"","

-->

<decoder name="qualys_fields">
	<parent>qualysguard</parent>
	<regex>"(\d\d\d\d\d\d),""(\w+)"",""(\d\d/\d\d/\d\d\d\d \(Overdue\))"",""(\d+.\d+.\d+.\d+)"",</regex>
	<order>qualysguard.ticket, qualysguard.state, qualysguard.due_date, qualysguard.ip</order>
</decoder>

<!-- The port can have two formats: ""number"" or just nothing. We need to use | but we only want to make the logical operation between a 4-cipher number or nothing. -->
<decoder name="qualys_fields">
	<parent>qualysguard</parent>
	<regex offset="after_regex">^""(\d*)"",|(\s*),</regex>
	<order>qualysguard.port</order>
</decoder>

<!-- The instance is always empty on the example log, so we suppose it's always empty -->
<decoder name="qualys_fields">
	<parent>qualysguard</parent>
	<regex offset="after_regex">^""(\w*)"",|(\s*),</regex>
	<order>qualysguard.instance</order>
</decoder>

<!-- The DNS Hostname can be either a string with no spaces or be empty -->
<decoder name="qualys_fields">
	<parent>qualysguard</parent>
	<regex offset="after_regex">^""(\S*)"",|(\s*),</regex>
	<order>qualysguard.dns_hostname</order>
</decoder>

<!-- The NetBIOS Hostname can be either a string or be empty -->
<decoder name="qualys_fields">
	<parent>qualysguard</parent>
	<regex offset="after_regex">^""(\w*)"",|(\s*),</regex>
	<order>qualysguard.netbios_hostname</order>
</decoder>

<!--
	- The Severity is a String with (optional) spaces that is never empty,
	- The QID is a number which is never empty
	- The Vulnerability title is a string with spaces and is never empty
	- The Owner is a string which is never empty and has the following structure:
		* Name
		* Surname
		* (Job)
		But it may dipher in other log examples.
	- The "Modified" is a date parameter which is never  empty and has the following structure
		* dd/mm/yyyy at hh:mm:ss (\S+)
	- The "Created" is exacty the same as "Modified"
-->
<decoder name="qualys_fields">
	<parent>qualysguard</parent>
	<regex offset="after_regex">^""(\.+)"",""(\d+)"",""(\.+)"",""(\w+ \w+ \(\w+\))"",""(\d\d/\d\d/\d\d\d\d at \d\d:\d\d:\d\d \(\S+\))"",""(\d\d/\d\d/\d\d\d\d at \d\d:\d\d:\d\d \(\S+\))"",</regex>
	<order>qualysguard.severity, qualysguard.qid, qualysguard.vulnerability_title, qualysguard.owner, qualysguard.modified, qualysguard.created</order>
</decoder>

<!-- Finally, the "Resolved" is always empty on the example log, but I think it has the same structure as "Modified" and "Created" -->
<decoder name="qualys_fields">
	<parent>qualysguard</parent>
	<regex offset="after_regex">""(\d\d/\d\d/\d\d\d\d at \d\d:\d\d:\d\d \(\S+\))"""$|(\s*)\p$</regex>
	<order>qualysguard.resolved</order>
</decoder>
